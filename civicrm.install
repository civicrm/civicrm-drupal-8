<?php

/**
 * @file
 * Contains install-time code for the CiviCRM module.
 */

use Drupal\Core\Database\Database;

/**
 * Contains things that need to be installed when the module is installed.
 */
function civicrm_install() {
  /** @var \Civi\Setup $setup */
  $setup = _civicrm_setup();

  $installed = $setup->checkInstalled();
  if ($installed->isSettingInstalled() || $installed->isDatabaseInstalled()) {
    drupal_set_message(t("CiviCRM appears to have already been installed. Skipping full installation."));
  }

  $setup->installFiles();
  $setup->installDatabase();
}

/**
 * Implements hook_requirements().
 */
function civicrm_requirements($phase) {
  $requirements = [];

  $civicrm_base = _civicrm_find_civicrm();

  if ($civicrm_base) {
    $requirements['civicrm.location'] = [
      'title' => 'CiviCRM location',
      'severity' => REQUIREMENT_OK,
      'description' => 'CiviCRM core directory',
    ];
  }
  else {
    $requirements['civicrm.location'] = [
      'title' => 'CiviCRM location',
      'severity' => REQUIREMENT_ERROR,
      'description' => 'CiviCRM must be installed via composer.',
    ];
    return $requirements;
  }

  /** @var \Civi\Setup $setup */
  $setup = _civicrm_setup();
  if ($phase === 'install' && !$setup->checkAuthorized()->isAuthorized()) {
    $requirements['civicrm.checkAuthorized'] = [
      'title' => 'CiviCRM Installation Not Authorized',
      'description' => 'The current user does not have sufficient permissions to perform installation.',
      'severity' => REQUIREMENT_WARNING,
    ];
    return $requirements;
  }

  $severityMap = [
    'info' => REQUIREMENT_OK,
    'warning' => REQUIREMENT_WARNING,
    'error' => REQUIREMENT_ERROR,
  ];
  $sections = [
    'system' => 'CiviCRM: System',
    'database' => 'CiviCRM: Database',
    'other' => 'CiviCRM: Other',
  ];

  foreach ($setup->checkRequirements()->getMessages() as $msg) {
    $section = isset($sections[$msg['section']]) ? $sections[$msg['section']] : $sections['other'];
    $key = 'civicrm.' . $msg['section'] . '.' . $msg['name'];
    $requirements[$key] = [
      'title' => $section . ': ' . $msg['message'],
      'description' => $section . ': ' . $msg['message'],
      'severity' => $severityMap[$msg['severity']],
    ];
  }

  ksort($requirements);

  return $requirements;
}

/**
 * @return \Civi\Setup
 */
function _civicrm_setup() {
  if (defined('CIVI_SETUP')) {
    return Civi\Setup::instance();
  }

  $civicrm_base = _civicrm_find_civicrm();
  require_once $civicrm_base . '/CRM/Core/ClassLoader.php';
  CRM_Core_ClassLoader::singleton()->register();

  \Civi\Setup::assertProtocolCompatibility(1.0);
  \Civi\Setup::init([
    'cms' => 'Drupal8',
    'srcPath' => $civicrm_base,
  ]);

  $setup = Civi\Setup::instance();

  // FIXME: Move more of this to plugins/init/Drupal8.civi-setup.php.
  $civicrm_db = _civicrm_get_db_config()['info'];
  $setup->getModel()->db = [
    'server' => \Civi\Setup\DbUtil::encodeHostPort($civicrm_db['host'], $civicrm_db['port'] ?: NULL),
    'username' => $civicrm_db['username'],
    'password' => $civicrm_db['password'],
    'database' => $civicrm_db['database'],
  ];

  return $setup;
}

/**
 * Returns the path to where CiviCRM is installed.
 *
 * Installation via composer is recommended. We also allow /modules/civicrm,
 * which seems to work fine.
 *
 * @return string|null
 *   A string to the location if we can find where CiviCRM is installed, NULL
 *   if we can't.
 */
function _civicrm_find_civicrm() {
  $possible_paths = [];

  if ($path = drupal_get_path('module', 'civicrm')) {
    $possible_paths[] = $path;
  }
  $possible_paths[] = 'vendor/civicrm/civicrm-core';
  $possible_paths[] = '../vendor/civicrm/civicrm-core';

  foreach ($possible_paths as $path) {
    if (file_exists($path . '/CRM/Core/ClassLoader.php')) {
      return \Drupal::service('file_system')->realpath($path);
    }
  }

  return NULL;
}

/**
 * Attempt to use a 'civicrm' labelled database connection if one exists.
 *
 * Otherwise default to using the same connection used by drupal.
 * Also handle the special case where this is running as a test.
 *
 * @return string[]
 *   An array of what database-config to use.
 */
function _civicrm_get_db_config() {
  if (drupal_valid_test_ua()) {
    $config = Database::getConnectionInfo('civicrm_test');
    if ($config) {
      return [
        'key' => 'civicrm_test',
        'info' => $config['default'],
      ];
    }
    else {
      throw new \RuntimeException("No civicrm_test database provided");
    }
  }

  if ($config = Database::getConnectionInfo('civicrm')) {
    return [
      'key' => 'civicrm',
      'info' => $config['default'],
    ];
  }
  else {
    return [
      'key' => 'default',
      'info' => Database::getConnectionInfo('default')['default'],
    ];
  }
}
